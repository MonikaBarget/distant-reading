import{_ as a,c as n,a0 as o,j as e,o as s}from"./chunks/framework.Ccoi24fT.js";const g=JSON.parse('{"title":"Topic modelling","description":"","frontmatter":{},"headers":[],"relativePath":"pages_nlp_topicmodels.md","filePath":"pages_nlp_topicmodels.md"}'),i={name:"pages_nlp_topicmodels.md"};function r(l,t,c,d,p,u){return s(),n("div",null,t[0]||(t[0]=[o('<h1 id="topic-modelling" tabindex="-1">Topic modelling <a class="header-anchor" href="#topic-modelling" aria-label="Permalink to &quot;Topic modelling&quot;">​</a></h1><h2 id="why-topic-models-are-used-in-computational-text-analysis" tabindex="-1">Why topic models are used in computational text analysis <a class="header-anchor" href="#why-topic-models-are-used-in-computational-text-analysis" aria-label="Permalink to &quot;Why topic models are used in computational text analysis&quot;">​</a></h2><p>Topic modelling is an unsupervised machine learning technique used to discover abstract &quot;topics&quot; in a collection of documents. Topic modelling identifies patterns of word co-occurrence across texts while the number of desired &quot;topics&quot; created is defined by the user and strongly depends on the research question. Topic modelling helps researchers explore large text collections without reading every document and can also serve as a basis for more detailed manual coding (in qualitative research). However, topics generated by algorithms are <strong>statistical</strong>, not semantic. They represent clusters of words that often appear together, not human-like &quot;themes&quot; or &quot;subjects.&quot; This distinction is crucial for your interpretation and explains the need to experiment with different topic numbers and iterations.</p><h2 id="statistical-versus-semantic-topic-identification" tabindex="-1">Statistical versus semantic topic identification <a class="header-anchor" href="#statistical-versus-semantic-topic-identification" aria-label="Permalink to &quot;Statistical versus semantic topic identification&quot;">​</a></h2><p>The reason why a semantic topic identification cannot be performed with rule-based NLP algorithms but requires human intervention or the use of Large Language Models (LLMs) is that words have different meanings depending on context, and humans also use words ambiguously. The following three sentences are examples of text fragments that demonstrate this complexity:</p><ul><li>&quot;Garden plants need a lot of <span style="color:blue;">water</span>.&quot;</li><li>&quot;You have to boil <span style="color:blue;">water</span> and cook the <span style="color:red;">vegetables</span> till tender.&quot;</li><li>&quot;Growing <span style="color:red;">vegetables</span> in your garden can be difficult when there are slugs.&quot;</li></ul><p>A human reader will immediately recognize that the first and third texts focus on gardening, while the second text is about cooking. However, just looking at the vocabulary used, there are overlaps between all three texts:</p><ul><li>&quot;<span style="color:red;">vegetables</span>&quot; is used both in text 2 and text 3.</li><li>&quot;<span style="color:blue;">water</span>&quot; is used both in text 1 and text 2.</li></ul><p>As a consequence, a statistical topic model like Latent Dirichlet Allocation (LDA) would to tokenize the sentences and count word co-occurrences, then group words that frequently appear together into &quot;topics&quot;, but ingore context and treat words as independent entities. If you ask the model to identify two topics for you, you will receive output like this:</p>',9),e("ul",null,[e("li",{"water,":"","boil,":"","cook,":"","tender,":"",vegetables:""},"Topic 1:"),e("li",{"water,":"","garden,":"","plants,":"","vegetables,":"",slugs:""},"Topic 2:")],-1),o(`<p>As a human reader, you would still likely interpret the first topic as <em>cooking</em> and the second as <em>gardening</em>, but the model per se cannot distinguish that &quot;water&quot; in the first sentence has a different usage than in the second sentence. The model also does not know that, in our sample, &quot;slugs&quot; are mentioned as a garden pest or that &quot;tender&quot; is related to food texture. This why it also never suggests a name or title for your topics other than <em>topic 1</em>, <em>topic 2</em>, etc. The labelling of topics always has to come from you.</p><p>When you give the same sentences to a Large Language Model (LLM), the model can, of course, make suggetions about context and meaning. Mistral.ai, for example, gives the following interpretation for the sample:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Sentence 1: &quot;Garden plants need a lot of water.&quot;</span></span>
<span class="line"><span>Topic: Gardening</span></span>
<span class="line"><span>Reasoning: &quot;Garden&quot; and &quot;plants&quot; are strong indicators of gardening. &quot;Water&quot; is used in the context of plant care.</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Sentence 2: &quot;You have to boil water and cook the vegetables till tender.&quot;</span></span>
<span class="line"><span>Topic: Cooking</span></span>
<span class="line"><span>Reasoning: &quot;Boil,&quot; &quot;cook,&quot; and &quot;tender&quot; are strong indicators of cooking. &quot;Water&quot; is used in the context of boiling, and &quot;vegetables&quot; are being cooked.</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Sentence 3: &quot;Growing vegetables in your garden can be difficult when there are slugs.&quot;</span></span>
<span class="line"><span>Topic: Gardening</span></span>
<span class="line"><span>Reasoning: &quot;Growing,&quot; &quot;garden,&quot; and &quot;slugs&quot; are strong indicators of gardening. &quot;Vegetables&quot; are being grown, not cooked.</span></span></code></pre></div><p>In some circumstances, it can be very useful that LLMs recognise semantic relationships, but the focus on word co-occurences is reproducible and avoids biases coming from training data or prompts. Also, the use of LLMs is energy-intensive and has a large environmental footprint. You should, therefore, carefully consider when and why the use of LLMs is necessary.</p><h2 id="topic-modelling-algorithms-and-their-use-cases" tabindex="-1">Topic modelling algorithms and their use cases <a class="header-anchor" href="#topic-modelling-algorithms-and-their-use-cases" aria-label="Permalink to &quot;Topic modelling algorithms and their use cases&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Model</th><th>Description</th><th>Use Case Example</th></tr></thead><tbody><tr><td><strong>LDA</strong></td><td>The most common model; assumes documents are mixtures of topics.</td><td>Exploring themes in historical newspapers.</td></tr><tr><td><strong>BERTopic</strong></td><td>Uses transformer models (like BERT) to create dense clusters for more coherent topics.</td><td>Analyzing social media posts.</td></tr><tr><td><strong>NMF</strong></td><td>Non-Negative Matrix Factorization; works well with shorter texts.</td><td>Studying customer reviews.</td></tr><tr><td><strong>Top2Vec</strong></td><td>Combines topic modelling with word embeddings for semantically richer topics.</td><td>Researching scientific literature.</td></tr></tbody></table><p><strong>Note:</strong> No model is &quot;perfect.&quot; The choice depends on your data and goals. Always validate your topics by reading sample documents from your corpus.</p><h2 id="tool-1-topic-modelling-in-voyant-tools" tabindex="-1">Tool 1: Topic modelling in Voyant Tools <a class="header-anchor" href="#tool-1-topic-modelling-in-voyant-tools" aria-label="Permalink to &quot;Tool 1: Topic modelling in Voyant Tools&quot;">​</a></h2><p><a href="https://voyant-tools.org/" target="_blank" rel="noreferrer">Voyant Tools</a> as web-based platform for text analysis also includes a <a href="https://voyant-tools.org/docs/tutorial-topics.html" target="_blank" rel="noreferrer">topic modelling option</a>. In the interface of the Voyant suite, you can find it under <em>Corpus Tools</em>. This tool uses the Latent Dirichlet Allocation (LDA) algorithm, specifically the jsLDA implementation by David Mimno. The algorithm starts by temporarily assigning words in your documents to a set number of topics (you choose how many topics to create). This initial assignment isn’t meaningful yet — it’s just a starting point. The algorithm then goes through 50 iterations (or cycles) to improve the model. In each iteration, it adjusts which words belong to which topics based on how often they appear together in your documents. Over time, the topics become more coherent and meaningful. Because the process starts with a random temporary assignment, the final topics can vary slightly each time you run the analysis. This might seem inconsistent, but the topics usually maintain a logical structure. Think of it like shuffling a deck of cards: you’ll get a different order each time, but the same types of cards will still group together. In the topic output you see, only the top n (e.g. 10) words per topic are shown. The more words you include, the more overlaps you will see between the topics you created as each topic actually includes all word in your topic in the end. However, the words are ranked by how strongly they relate to the topic, with the first few words being the most defining for that topic.</p><p>To better understand what is happening behind the tool, you can use the [Spyral Topic Modelling Notebook by Geoffrey Rockwell] that walks you through the actual code. You don’t need to write any code from scratch but can read the explanations and follow the notebook’s steps. Like the user interface in Voyant, the topics notebook starts by loading a text corpus (e.g., the default &quot;Frankenstein&quot; text). The notebook then runs a probabilistic model (LDA) to identify topics and displays the results in a panel. You can adjust the number of topics and words per topic to fit your needs. This notebook is shared under a Creative Commons Attribution (CC BY) license and you may adapt it for your own projects.</p><h2 id="tool-2-dariah-de-topic-explorer" tabindex="-1">Tool 2: DARIAH-DE Topic Explorer <a class="header-anchor" href="#tool-2-dariah-de-topic-explorer" aria-label="Permalink to &quot;Tool 2: DARIAH-DE Topic Explorer&quot;">​</a></h2><p>The <a href="https://topics.dariah.eu/" target="_blank" rel="noreferrer">DARIAH-DE Topic Explorer</a> is another beginner-friendly tool for topic modelling and specially designed for humanities research. It also uses LDA to generate topics from your text collection.</p><h3 id="how-to-use-the-topic-explorer" tabindex="-1">How to Use the Topic Explorer: <a class="header-anchor" href="#how-to-use-the-topic-explorer" aria-label="Permalink to &quot;How to Use the Topic Explorer:&quot;">​</a></h3><ol><li><strong>Upload your corpus</strong> (plain text files, one per document).</li><li><strong>Set parameters</strong> (e.g., number of topics, stopwords).</li><li><strong>Run the model</strong> and explore the generated topics.</li><li><strong>Interpret results</strong> by examining: <ul><li>The <strong>top words</strong> in each topic.</li><li><strong>Sample documents</strong> where a topic is prominent.</li></ul></li></ol><p>Advantages of the Dariah Topics Explorer are that, similar to Voyant, no coding skills are required. Also, the iterative refinement is very helpful. It is recommended to start with a small number of topics (5 to 10) and increase gradually. It is rare that you will already get the best result in the first attempt.</p>`,15)]))}const m=a(i,[["render",r]]);export{g as __pageData,m as default};
